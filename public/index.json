[
{
	"uri": "//localhost:1313/1-setup-environment/",
	"title": "Setting Up AWS Environment",
	"tags": [],
	"description": "",
	"content": "Part 1: Setting Up AWS Environment 1.1. Creating an AWS Account (if you don\u0026rsquo;t have one) Step 1: Sign up for AWS\nOpen your web browser and go to: https://aws.amazon.com Click on \u0026ldquo;Create a free account\u0026rdquo; button Fill in your personal information and credit card details (AWS requires a card for identity verification, but you won\u0026rsquo;t be charged if you stay within free tier limits) Complete the registration and verification process Step 2: Access AWS Management Console\nGo to https://aws.amazon.com Click \u0026ldquo;Sign in to the Console\u0026rdquo; Enter your login credentials 1.2. Creating an S3 Bucket for Website Hosting Step 1: Navigate to S3 Service\nIn the AWS Management Console, type \u0026ldquo;S3\u0026rdquo; in the search bar at the top Select \u0026ldquo;S3\u0026rdquo; from the search results Step 2: Create a New Bucket\nClick the orange \u0026ldquo;Create bucket\u0026rdquo; button In the \u0026ldquo;General configuration\u0026rdquo; section: Enter a unique bucket name (e.g., youtube-thumbnail-creator-[your-name]) Note: Bucket names must be globally unique In the \u0026ldquo;AWS Region\u0026rdquo; section: Select a region close to your location (e.g., us-east-1 for US East) Step 3: Configure Public Access Settings\nScroll down to \u0026ldquo;Block Public Access settings for this bucket\u0026rdquo; Uncheck the box for \u0026ldquo;Block all public access\u0026rdquo; Check the acknowledgment box that says \u0026ldquo;I acknowledge that the current settings might result in this bucket and the objects within becoming public\u0026rdquo; Keep all other settings as default Click \u0026ldquo;Create bucket\u0026rdquo; at the bottom of the page 1.3. Configuring S3 for Static Website Hosting Step 1: Open Bucket Properties\nFrom the list of buckets, click on the name of your newly created bucket Select the \u0026ldquo;Properties\u0026rdquo; tab Step 2: Enable Static Website Hosting\nScroll down to find the \u0026ldquo;Static website hosting\u0026rdquo; section Click the \u0026ldquo;Edit\u0026rdquo; button Select \u0026ldquo;Enable\u0026rdquo; For \u0026ldquo;Index document\u0026rdquo;, enter: index.html Click \u0026ldquo;Save changes\u0026rdquo; Step 3: Note the Website URL\nAfter saving, scroll back to the \u0026ldquo;Static website hosting\u0026rdquo; section You\u0026rsquo;ll see a \u0026ldquo;Bucket website endpoint\u0026rdquo; - this is your website\u0026rsquo;s URL Make a note of this URL for later use 1.4. Setting Bucket Permissions Step 1: Configure Bucket Policy\nSelect the \u0026ldquo;Permissions\u0026rdquo; tab Scroll down to the \u0026ldquo;Bucket policy\u0026rdquo; section Click \u0026ldquo;Edit\u0026rdquo; Step 2: Add the Policy\nIn the policy editor, paste the following policy (replace [bucket-name] with your actual bucket name): { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::[bucket-name]/*\u0026#34; } ] } For example, if your bucket name is \u0026ldquo;youtube-thumbnail-creator-john\u0026rdquo;, the policy would be: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::youtube-thumbnail-creator-john/*\u0026#34; } ] } Click \u0026ldquo;Save changes\u0026rdquo; "
},
{
	"uri": "//localhost:1313/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Work with Amazon System Manager - Session Manager Overall In this lab, you\u0026rsquo;ll learn the basics and practice of Amazon System Manager - Session Manager . Perform creating public and private instance connections.\nContent Introduction Preparation Connect to EC2 instance Manage session logs Port Forwarding Clean up resources "
},
{
	"uri": "//localhost:1313/2-cognito-authentication/",
	"title": "Setting Up Amazon Cognito",
	"tags": [],
	"description": "",
	"content": "Part 2: Setting Up Amazon Cognito (User Authentication) 2.1. Creating a User Pool Step 1: Access Cognito Service\nIn the AWS Console search bar, type \u0026ldquo;Cognito\u0026rdquo; and select it from the results Click \u0026ldquo;Create user pool\u0026rdquo; Step 2: Configure Sign-in Experience\nIn the \u0026ldquo;Configure sign-in experience\u0026rdquo; section: Select \u0026ldquo;Email\u0026rdquo; as the sign-in option Uncheck any other options Click \u0026ldquo;Next\u0026rdquo; Step 3: Configure Security Requirements\nIn the \u0026ldquo;Configure security requirements\u0026rdquo; section: Keep the default password policy settings Select \u0026ldquo;No MFA\u0026rdquo; (No Multi-Factor Authentication) Check \u0026ldquo;Enable self-registration\u0026rdquo; to allow users to sign up Click \u0026ldquo;Next\u0026rdquo; Step 4: Configure Sign-up Experience\nIn the \u0026ldquo;Configure sign-up experience\u0026rdquo; section: Select \u0026ldquo;Send email with Cognito\u0026rdquo; Click \u0026ldquo;Next\u0026rdquo; Step 5: Configure App Integration\nIn the \u0026ldquo;Configure app integration\u0026rdquo; section: User pool name: Enter \u0026quot;YouTubeThumbnailCreatorUsers\u0026quot; Check \u0026ldquo;Use the Cognito Hosted UI\u0026rdquo; Domain name: Enter \u0026ldquo;youtube-thumbnail-creator-[your-name]\u0026rdquo; In the \u0026ldquo;Initial app client\u0026rdquo; section: App client name: Enter \u0026ldquo;WebClient\u0026rdquo; Select \u0026ldquo;Public client\u0026rdquo; Uncheck \u0026ldquo;Generate a client secret\u0026rdquo; Click \u0026ldquo;Next\u0026rdquo; Step 6: Review and Create\nReview all settings Click \u0026ldquo;Create user pool\u0026rdquo; 2.2. Saving User Pool Information Step 1: Get User Pool ID\nAfter creation, you\u0026rsquo;ll see the User Pool details page Note down the \u0026ldquo;User Pool ID\u0026rdquo; displayed at the top (e.g., us-east-1_AbCdEfGh) Step 2: Get App Client ID\nSelect the \u0026ldquo;App integration\u0026rdquo; tab Scroll down to the \u0026ldquo;App clients and analytics\u0026rdquo; section Click on the \u0026ldquo;WebClient\u0026rdquo; app client name Note down the \u0026ldquo;Client ID\u0026rdquo; (e.g., 1a2b3c4d5e6f7g8h9i0j) "
},
{
	"uri": "//localhost:1313/3-ses-email/",
	"title": "Setting Up Amazon SES",
	"tags": [],
	"description": "",
	"content": "Part 3: Setting Up Amazon SES (Email Service) 3.1. Verifying an Email Address Step 1: Access SES Service\nIn the AWS Console search bar, type \u0026ldquo;SES\u0026rdquo; and select \u0026ldquo;Simple Email Service\u0026rdquo; In the left menu, select \u0026ldquo;Verified identities\u0026rdquo; Step 2: Create Email Identity\nClick \u0026ldquo;Create identity\u0026rdquo; Select \u0026ldquo;Email address\u0026rdquo; Enter your email address (you must have access to this inbox) Click \u0026ldquo;Create identity\u0026rdquo; Step 3: Verify the Email\nCheck the inbox of the email address you entered Look for an email from Amazon SES with the subject \u0026ldquo;Amazon SES Address Verification Request\u0026rdquo; Open the email and click the verification link You should see a success confirmation page 3.2. Exiting SES Sandbox (Optional) By default, SES operates in a sandbox environment, allowing you to send emails only to verified addresses. To send emails to any address:\nStep 1: Request Production Access\nIn the SES Console, select \u0026ldquo;Account dashboard\u0026rdquo; Find the \u0026ldquo;Sending statistics\u0026rdquo; section Click \u0026ldquo;Request production access\u0026rdquo; Step 2: Complete the Request Form\nSelect the region you want to move out of the sandbox Fill in information about how you\u0026rsquo;ll use SES Describe your process for handling bounces and complaints Submit the request Step 3: Wait for Approval\nAWS typically takes 24-48 hours to review the request You\u0026rsquo;ll receive an email notification when your request is approved "
},
{
	"uri": "//localhost:1313/4-lambda-logic/",
	"title": "Setting Up AWS Lambda",
	"tags": [],
	"description": "",
	"content": "Part 4: Setting Up AWS Lambda (Server-side Logic) 4.1. Creating a Lambda Function for Feedback Handling Step 1: Access Lambda Service\nIn the AWS Console search bar, type \u0026ldquo;Lambda\u0026rdquo; and select it Click \u0026ldquo;Create function\u0026rdquo; Step 2: Configure the Function\nSelect \u0026ldquo;Author from scratch\u0026rdquo; In the \u0026ldquo;Basic information\u0026rdquo; section: Function name: Enter \u0026quot;FeedbackHandler\u0026quot; Runtime: Select \u0026ldquo;Node.js 16.x\u0026rdquo; from the dropdown Architecture: Keep the default \u0026ldquo;x86_64\u0026rdquo; Expand the \u0026ldquo;Permissions\u0026rdquo; section: Select \u0026ldquo;Create a new role with basic Lambda permissions\u0026rdquo; Click \u0026ldquo;Create function\u0026rdquo; Step 3: Add the Code\nIn the \u0026ldquo;Code\u0026rdquo; tab, you\u0026rsquo;ll see a code editor Delete all existing code Paste the following code: const AWS = require(\u0026#34;aws-sdk\u0026#34;); const ses = new AWS.SES({ region: \u0026#34;us-east-1\u0026#34; }); // Change region if needed exports.handler = async (event) =\u0026gt; { try { // Parse request body const body = JSON.parse(event.body); const { message, userEmail } = body; if (!message || !userEmail) { return { statusCode: 400, body: JSON.stringify({ error: \u0026#34;Missing required information\u0026#34; }), }; } // Send confirmation email await sendConfirmationEmail(userEmail); // Store feedback (could be expanded to save to DynamoDB) console.log(`Feedback from ${userEmail}: ${message}`); return { statusCode: 200, body: JSON.stringify({ message: \u0026#34;Feedback received successfully\u0026#34; }), }; } catch (error) { console.error(\u0026#34;Error:\u0026#34;, error); return { statusCode: 500, body: JSON.stringify({ error: \u0026#34;Internal server error\u0026#34; }), }; } }; async function sendConfirmationEmail(email) { const params = { Source: \u0026#34;your-verified-email@example.com\u0026#34;, // Replace with your verified email Destination: { ToAddresses: [email], }, Message: { Subject: { Data: \u0026#34;Thank you for your feedback - YouTube Thumbnail Creator\u0026#34;, }, Body: { Html: { Data: `...` } }, }, }; return ses.sendEmail(params).promise(); } Replace your-verified-email@example.com with the email address you verified in SES Replace us-east-1 with your AWS region if different Click \u0026ldquo;Deploy\u0026rdquo; to save the code 4.2. Creating a Lambda Function for Email Verification Step 1: Create a New Function\nGo back to the Lambda main page Click \u0026ldquo;Create function\u0026rdquo; Select \u0026ldquo;Author from scratch\u0026rdquo; Function name: Enter \u0026ldquo;EmailVerifier\u0026rdquo; Runtime: Select \u0026ldquo;Node.js 16.x\u0026rdquo; Expand \u0026ldquo;Permissions\u0026rdquo; and select \u0026ldquo;Create a new role with basic Lambda permissions\u0026rdquo; Click \u0026ldquo;Create function\u0026rdquo; Step 2: Add the Code\nIn the \u0026ldquo;Code\u0026rdquo; tab, delete all existing code Paste the following code: const AWS = require(\u0026#34;aws-sdk\u0026#34;); const cognito = new AWS.CognitoIdentityServiceProvider(); const ses = new AWS.SES({ region: \u0026#34;us-east-1\u0026#34; }); // Change region if needed exports.handler = async (event) =\u0026gt; { try { // Parse request body const body = JSON.parse(event.body); const { action, userEmail, password } = body; if (action === \u0026#34;send_otp\u0026#34;) { // Generate OTP const otpCode = generateOTP(); await sendOTPEmail(userEmail, otpCode); return { statusCode: 200, body: JSON.stringify({ message: \u0026#34;OTP sent successfully\u0026#34;, otpCode }), }; } else if (action === \u0026#34;signup_with_otp\u0026#34;) { const { confirmationCode } = body; await createCognitoUser(userEmail, password); return { statusCode: 200, body: JSON.stringify({ message: \u0026#34;User created successfully\u0026#34; }), }; } else { return { statusCode: 400, body: JSON.stringify({ error: \u0026#34;Invalid action\u0026#34; }), }; } } catch (error) { console.error(\u0026#34;Error:\u0026#34;, error); return { statusCode: 500, body: JSON.stringify({ error: error.message || \u0026#34;Internal server error\u0026#34; }), }; } }; function generateOTP() { return Math.floor(100000 + Math.random() * 900000).toString(); } async function sendOTPEmail(email, otpCode) { const params = { Source: \u0026#34;your-verified-email@example.com\u0026#34;, // Replace with your verified email Destination: { ToAddresses: [email] }, Message: { Subject: { Data: \u0026#34;Your verification code - YouTube Thumbnail Creator\u0026#34; }, Body: { Html: { Data: `...` } }, }, }; return ses.sendEmail(params).promise(); } async function createCognitoUser(email, password) { const params = { ClientId: \u0026#34;YOUR_COGNITO_APP_CLIENT_ID\u0026#34;, // Replace with your App Client ID Username: email, Password: password, UserAttributes: [ { Name: \u0026#34;email\u0026#34;, Value: email }, { Name: \u0026#34;email_verified\u0026#34;, Value: \u0026#34;true\u0026#34; }, ], }; return cognito.signUp(params).promise(); } Replace: your-verified-email@example.com with your verified email address YOUR_COGNITO_APP_CLIENT_ID with your App Client ID from Cognito us-east-1 with your AWS region if different Click \u0026ldquo;Deploy\u0026rdquo; to save the code 4.3. Configuring Lambda Permissions Step 1: Configure Permissions for FeedbackHandler\nOpen the \u0026ldquo;FeedbackHandler\u0026rdquo; Lambda function Select the \u0026ldquo;Configuration\u0026rdquo; tab Select \u0026ldquo;Permissions\u0026rdquo; from the left menu Click on the role name to open the IAM Console In the IAM Console, click \u0026ldquo;Add permissions\u0026rdquo; \u0026gt; \u0026ldquo;Attach policies\u0026rdquo; Search for and select \u0026ldquo;AmazonSESFullAccess\u0026rdquo; Click \u0026ldquo;Add permissions\u0026rdquo; Step 2: Configure Permissions for EmailVerifier\nGo back to Lambda and open the \u0026ldquo;EmailVerifier\u0026rdquo; function Select \u0026ldquo;Configuration\u0026rdquo; \u0026gt; \u0026ldquo;Permissions\u0026rdquo; Click on the role name to open the IAM Console Click \u0026ldquo;Add permissions\u0026rdquo; \u0026gt; \u0026ldquo;Attach policies\u0026rdquo; Search for and select both policies: AmazonSESFullAccess AmazonCognitoPowerUser Click \u0026ldquo;Add permissions\u0026rdquo; "
},
{
	"uri": "//localhost:1313/5-api-gateway/",
	"title": "Setting Up API Gateway",
	"tags": [],
	"description": "",
	"content": "Part 5: Setting Up API Gateway (Creating APIs for the Website) 5.1. Creating an API Step 1: Access API Gateway\nIn the AWS Console search bar, type \u0026ldquo;API Gateway\u0026rdquo; and select the service Click \u0026ldquo;Create API\u0026rdquo; Step 2: Choose API Type\nSelect \u0026ldquo;REST API\u0026rdquo; (not \u0026ldquo;REST API Private\u0026rdquo; or \u0026ldquo;HTTP API\u0026rdquo;) Click \u0026ldquo;Build\u0026rdquo; Step 3: Configure the API\nSelect \u0026ldquo;New API\u0026rdquo; API name: Enter \u0026quot;ThumbnailCreatorAPI\u0026quot; Keep other settings as default Click \u0026ldquo;Create API\u0026rdquo; 5.2. Creating Resources and Methods Step 1: Create a Resource\nIn your newly created API page, click \u0026ldquo;Actions\u0026rdquo; Select \u0026ldquo;Create Resource\u0026rdquo; Resource Name: Enter \u0026quot;feedback\u0026quot; Keep other settings as default Click \u0026ldquo;Create Resource\u0026rdquo; Step 2: Create a Method\nSelect the \u0026ldquo;/feedback\u0026rdquo; resource you just created Click \u0026ldquo;Actions\u0026rdquo; \u0026gt; \u0026ldquo;Create Method\u0026rdquo; From the dropdown menu, select \u0026ldquo;POST\u0026rdquo; Click the checkmark to confirm In the \u0026ldquo;Setup\u0026rdquo; section: Integration type: Select \u0026ldquo;Lambda Function\u0026rdquo; Lambda Region: Select your Lambda region (e.g., us-east-1) Lambda Function: Type \u0026ldquo;FeedbackHandler\u0026rdquo; and select it from the dropdown Click \u0026ldquo;Save\u0026rdquo; When the permission confirmation dialog appears, click \u0026ldquo;OK\u0026rdquo; 5.3. Configuring CORS Step 1: Enable CORS\nSelect the \u0026ldquo;/feedback\u0026rdquo; resource Click \u0026ldquo;Actions\u0026rdquo; \u0026gt; \u0026ldquo;Enable CORS\u0026rdquo; For \u0026ldquo;Access-Control-Allow-Origin\u0026rdquo;, enter \u0026ldquo;*\u0026rdquo; (to allow all origins) Keep other settings as default Click \u0026ldquo;Enable CORS and replace existing CORS headers\u0026rdquo; In the confirmation dialog, click \u0026ldquo;Yes, replace existing values\u0026rdquo; "
},
{
	"uri": "//localhost:1313/6-website/",
	"title": "Setting Up the Website",
	"tags": [],
	"description": "",
	"content": "Part 6: Setting Up the Website 6.1. Downloading the Source Code Step 1: Create Project Directory\nCreate a new folder on your computer (e.g., youtube-thumbnail-creator) Inside that folder, create a subfolder named \u0026ldquo;website\u0026rdquo; Step 2: Create HTML Files\nCreate the following files in the \u0026ldquo;website\u0026rdquo; folder: index.html feedback.html login.html register.html verify.html forgot-password.html You can download the source code from the GitHub repository or use the code provided in this guide. 6.2. Updating Configuration Information Step 1: Update Cognito Information\nOpen the login.html file in a text editor Find the code section containing Cognito information (usually in the JavaScript section) Replace: ClientId: Replace with your App Client ID UserPoolId: Replace with your User Pool ID Step 2: Update API Gateway URL\nOpen the feedback.html file in a text editor Find the code section that calls the API (usually a fetch or axios function) Replace the API URL with your own (e.g., https://abc123def.execute-api.us-east-1.amazonaws.com/prod/feedback) Step 3: Update Verified Email\nOpen the register.html file in a text editor Find the code section related to sending emails Replace the default email address with your verified email 6.3. Uploading Files to S3 Step 1: Access S3 Bucket\nGo back to the AWS Console and open the S3 service Select your bucket Step 2: Upload Files\nClick the \u0026ldquo;Upload\u0026rdquo; button Click \u0026ldquo;Add files\u0026rdquo; Select all HTML files from your \u0026ldquo;website\u0026rdquo; folder Click \u0026ldquo;Upload\u0026rdquo; "
},
{
	"uri": "//localhost:1313/7-testing-usage/",
	"title": "Testing and Using the Website",
	"tags": [],
	"description": "",
	"content": "Part 7: Testing and Using the Website 7.1. Accessing the Website Step 1: Get the Website URL\nIn the S3 Console, select your bucket Select the \u0026ldquo;Properties\u0026rdquo; tab Scroll down to \u0026ldquo;Static website hosting\u0026rdquo; Click on the \u0026ldquo;Bucket website endpoint\u0026rdquo; to open the website in your browser Step 2: Check the Homepage\nThe homepage with the thumbnail creator tool should display Verify that all sections are displaying correctly 7.2. Testing the Features Step 1: Register an Account\nClick \u0026ldquo;Register\u0026rdquo; in the menu Enter your email and password Click \u0026ldquo;Register\u0026rdquo; You should receive a verification email with an OTP code Enter the OTP code to complete registration Step 2: Log In\nAfter registration, go back to the login page Enter your email and password Click \u0026ldquo;Log In\u0026rdquo; Step 3: Create a Thumbnail\nAfter logging in, go back to the homepage Drag and drop an image into the upload area Add a title and select effects Click \u0026ldquo;Download thumbnail\u0026rdquo; to save your thumbnail Step 4: Submit Feedback\nClick \u0026ldquo;Submit feedback\u0026rdquo; in the menu Rate with stars and enter your feedback Click \u0026ldquo;Submit Feedback\u0026rdquo; Check your email for a confirmation that your feedback was received "
},
{
	"uri": "//localhost:1313/8-troubleshooting/",
	"title": "Troubleshooting",
	"tags": [],
	"description": "",
	"content": "Part 8: Troubleshooting 8.1. CORS Issues Symptoms:\nError in browser console: \u0026ldquo;Access to fetch at \u0026lsquo;\u0026hellip;\u0026rsquo; from origin \u0026lsquo;\u0026hellip;\u0026rsquo; has been blocked by CORS policy\u0026rdquo; Solutions:\nCheck your CORS configuration in API Gateway: Go to API Gateway Select your API Select the \u0026ldquo;/feedback\u0026rdquo; resource Click \u0026ldquo;Actions\u0026rdquo; \u0026gt; \u0026ldquo;Enable CORS\u0026rdquo; Make sure \u0026ldquo;Access-Control-Allow-Origin\u0026rdquo; is set to \u0026ldquo;*\u0026rdquo; Click \u0026ldquo;Enable CORS and replace existing CORS headers\u0026rdquo; After updating CORS, remember to redeploy the API: Click \u0026ldquo;Actions\u0026rdquo; \u0026gt; \u0026ldquo;Deploy API\u0026rdquo; Select the \u0026ldquo;prod\u0026rdquo; stage Click \u0026ldquo;Deploy\u0026rdquo; 8.2. Login/Registration Issues Symptoms:\nUnable to register or log in Error \u0026ldquo;User does not exist\u0026rdquo; or \u0026ldquo;Incorrect username or password\u0026rdquo; Solutions:\nCheck your Cognito information: Make sure User Pool ID and App Client ID are correctly updated in your code Verify that the App Client is configured correctly (no client secret) Check Lambda permissions: Make sure the EmailVerifier Lambda function has AmazonCognitoPowerUser permission Check logs: Open the Lambda function Select the \u0026ldquo;Monitor\u0026rdquo; tab \u0026gt; \u0026ldquo;Logs\u0026rdquo; View logs to find specific errors 8.3. Email Sending Issues Symptoms:\nNot receiving verification or feedback confirmation emails Error \u0026ldquo;Email address not verified\u0026rdquo; in Lambda logs Solutions:\nCheck email verification status: Go to SES Console Select \u0026ldquo;Verified identities\u0026rdquo; Make sure your email has \u0026ldquo;Verified\u0026rdquo; status Check SES Sandbox: If you\u0026rsquo;re in the Sandbox, you can only send emails to verified addresses Make sure the recipient email address is also verified Check Lambda permissions: Make sure Lambda functions have AmazonSESFullAccess permission Check code: Make sure you replaced your-verified-email@example.com with your verified email "
},
{
	"uri": "//localhost:1313/9-additional-resources/",
	"title": "Additional Resources",
	"tags": [],
	"description": "",
	"content": "Part 9: Additional Resources 9.1. Documentation AWS S3 Documentation AWS Cognito Documentation AWS Lambda Documentation AWS API Gateway Documentation AWS SES Documentation 9.2. Tutorial Videos AWS S3 Static Website Hosting AWS Cognito User Authentication AWS Lambda and API Gateway 9.3. Support Contact If you need additional help, please contact us at: support@example.com\n"
},
{
	"uri": "//localhost:1313/10-cleanup-resources/",
	"title": "Cleaning Up AWS Resources",
	"tags": [],
	"description": "",
	"content": "Part 10: Cleaning Up AWS Resources After Completion After finishing the workshop or if you no longer need the resources, you should delete your AWS resources to avoid unexpected charges.\n10.1. Delete S3 Bucket Go to the AWS Console and open the S3 service. Select the bucket you created for the website. Click \u0026ldquo;Delete\u0026rdquo;. Confirm the bucket name to complete deletion. 10.2. Delete Cognito User Pool Go to the Cognito service. Select the User Pool you created. Click \u0026ldquo;Delete\u0026rdquo;. Confirm to delete the User Pool. 10.3. Delete Lambda Functions Go to the Lambda service. Select each function you created (FeedbackHandler, EmailVerifier). Click \u0026ldquo;Delete\u0026rdquo;. Confirm to delete the function. 10.4. Delete API Gateway Go to the API Gateway service. Select the API you created (ThumbnailCreatorAPI). Click \u0026ldquo;Delete\u0026rdquo;. Confirm to delete the API. 10.5. Delete Other Resources (if any) If you created additional resources such as DynamoDB, IAM Roles, SES Identities, etc., delete them if you no longer need them. Note: Double-check before deleting to avoid losing important data.\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]